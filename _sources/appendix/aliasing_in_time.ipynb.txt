{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 序列时域混叠\n",
    "\n",
    "同时域采样一样，定义采样序列$p_N(\\omega) = \\sum_{k=-\\infty}^{\\infty} \\delta (\\omega - 2k\\pi /N)$。那么，将频域采样前后的关系写为\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "    X_p(e^{j\\omega}) &= X(e^{j\\omega})\\cdot p_N(\\omega) = \\sum_{k=-\\infty}^\\infty \\delta\\left(\\omega - \\frac{2k\\pi}{N}\\right) \\cdot X(e^{j\\omega}) \\\\\n",
    "    & = \\sum_{k=-\\infty}^\\infty \\delta\\left(\\omega - \\frac{2k\\pi}{N}\\right) \\cdot X(e^{j2k\\pi/N}) \n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "其中$X_p(e^{j\\omega})$为$X[k]$的连续形式，表达的信号是等价的。那么对上式进行 IDTFT 变换，就可以得到频域采样后时域的信号，这里记作$\\tilde{x}[n]$\n",
    "\n",
    "\n",
    "\\begin{aligned}\n",
    "    \\tilde{x}[n] &= \\text{IDTFT}\\{X_p(e^{j\\omega})\\} \\\\\n",
    "    & =\\frac{1}{2 \\pi} \\int_{-\\pi}^{\\pi}\\left(\\sum_{k=-\\infty}^{\\infty} X\\left(e^{j 2 \\pi k / N}\\right) \\delta(\\omega-2 \\pi k / N)\\right) e^{j \\omega n} d \\omega \\\\\n",
    "    & = \\frac{1}{2 \\pi} \\sum_{k=-\\infty}^{\\infty} \\underbrace{X\\left(e^{j 2 \\pi k / N}\\right)}_{=\\sum_{l=-\\infty}^{+\\infty} x[l] e^{-j 2 \\pi k l / N}} \\cdot \\underbrace{\\int_{-\\pi}^{\\pi} \\delta(\\omega-2 \\pi k / N) e^{j \\omega n} d \\omega}_{=e^{j 2 \\pi k n / N, \\ \\text{ for } k\\in [0,N-1]}} \\\\\n",
    "    &= \\frac{1}{2 \\pi} \\sum_{l=-\\infty}^{\\infty} x[l] \\underbrace{\\sum_{k=0}^{N-1} e^{j 2 \\pi k / N(n-l)}}_{=N\\sum_{m=-\\infty}^{\\infty}\\delta[l-n-Nm]} \\\\\n",
    "    &= \\frac{N}{2 \\pi} \\sum_{m=-\\infty}^{\\infty} x[n+mN]\n",
    "\\end{aligned}\n",
    "\n",
    "\n",
    "上式最后一个等式的求和符号的含义就是，将原信号$x[n]$以$N$为长度，周期延拓。也就是说，如果对 DTFT 变换的频率进行离散化，会导致时域上信号的周期延拓，幅度也会变为原来的$N/2\\pi$倍。这个结论与对信号在时域进行采样，频域周期延拓是类似的。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAW4AAABiCAYAAABwFzlAAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAACABJREFUeJzt3e9rnWcdx/H3d2m2pZ2zjgZHs27ZA4mMiVSCbk5EnNCJww2f6ERBn3QP/LHJ6LBD8A/oGA4UsWxThnMOujJEhlVQ0YHUpa2sbrUypl1/jWVI16GRZunXBydZk9om56Tn9L6unPfrUXLn/vHhIufDOdf940RmIkmqxyVNB5AkdcbilqTKWNySVBmLW5IqY3FLUmUsbkmqjMUtSZWxuCWpMha3JFVm1VIrRMQG4HHgvUAC2zPz4cW2WbduXY6OjnYU5MR/pnnt5H+ZnjnN4MAlXH3l5axdPdjRPrqhhBwlZDBHuTm0Mu3Zs+eNzBxuZ90lixt4G7gvM/dGxLuAPRHxm8x86XwbjI6OMjEx0WZceGbfUbbu3M+66Zl3lg0ODvCdz32AOzeOtL2fC1VCjhIymKPcHFq5IuJQu+suOVWSmcczc+/sz28BB4Cu/qdu23WQqXkvCICp6Rm27TrYzcNUkaOEDOYoN4cEHc5xR8QosBHYfY6/bY6IiYiYmJyc7CjEsRNTHS3vlRJylJDBHOXmkKCD4o6IK4CngXsz8+TZf8/M7Zk5npnjw8NtTdO8Y/3aoY6W90oJOUrIYI5yc0jQZnFHxCCt0n4iM3d2O8SWTWMMDQ4sWDY0OMCWTWPdPlTxOUrIYI5yc0jQ3lUlATwKHMjMh3oRYu7kzv07XuDUzGlG1g6xZdPYRT/pU0KOEjKYo9wcEkAs9UUKEfEx4I/AfuD07OIHMvPZ820zPj6enVxVMufzP/oTAE/dfXPH23ZTCTlKyGCOcnNo5YmIPZk53s66S77jzszngLjgVJKkrvDOSUmqjMUtSZWxuCWpMha3JFXG4pakyljcklQZi1uSKmNxS1JlLG5JqozFLUmVsbglqTIWtyRVxuKWpMpY3JJUGYtbkipjcUtSZSxuSaqMxS1JlbG4JakyFrckVWbJLwuOiMeA24HXM/PG3keStJhn9h1l266DHDsxxfq1Q2zZNMadG0f6MkcJGZrIsWRxAz8Bvg883rMUktryzL6jbN25n6npGQCOnphi6879ABe1sErIUUKGpnIsOVWSmX8A/tWTo0vqyLZdB98piDlT0zNs23Ww73KUkKGpHF2b446IzRExERETk5OT3dqtpHmOnZjqaPlKzlFChqZydK24M3N7Zo5n5vjw8HC3ditpnvVrhzpavpJzlJChqRxeVSJVZMumMYYGBxYsGxocYMumsb7LUUKGpnK0c3JSUiHmTnbdv+MFTs2cZqShKylKyFFChqZytHM54JPAJ4B1EXEE+G5mPtqzRJIWdefGEZ7886sAPHX3zX2do4QMTeRYsrgz866ep5Aktc05bkmqjMUtSZWxuCWpMha3JFXG4pakyljcklQZi1uSKmNxS1JlLG5JqozFLUmVsbglqTIWtyRVxuKWpMpY3JJUGYtbkipjcUtSZSxuSaqMxS1JlbG4JakyFrckVaat4o6I2yLiYES8HBHf7nUoSdL5LVncETEA/AD4NHADcFdE3NDrYJKkc1vVxjofBl7OzFcAIuLnwB3AS90Oc9vvf8bVk4c59NyV3d51R75y/CRAozlKyGAOc9SQo4QMczleG94Ad9/c82O1U9wjwOF5vx8BPnL2ShGxGdgMcO211y4rzFVrLmP1mwPL2rabVl9qhjnmWMgcC5WQo4QM0Mpx1ZrLLsqx2inutmTmdmA7wPj4eC5nH3c88mC34lyQ65oOQBkZwBxnM8dCJeQoIQNc3BztnJw8CmyY9/s1s8skSQ2IzMXfHEfEKuDvwK20Cvt54IuZ+eIi20wCh5aZaR3wxjK3XWkci4Ucj4UcjzNWwlhcl5nD7ay45FRJZr4dEV8HdgEDwGOLlfbsNm0d/FwiYiIzx5e7/UriWCzkeCzkeJzRb2PR1hx3Zj4LPNvjLJKkNnjnpCRVpsTi3t50gII4Fgs5Hgs5Hmf01VgseXJSklSWEt9xS5IWYXFLUmWKKW6fQHhGRGyIiN9FxEsR8WJE3NN0pqZFxEBE7IuIXzadpWkRsTYidkTE3yLiQET0/uEYBYuIb82+Tv4aEU9GxOVNZ+q1IorbJxD+n7eB+zLzBuAm4Gt9Ph4A9wAHmg5RiIeBX2Xm+4EP0sfjEhEjwDeB8cy8kda9Jl9oNlXvFVHczHsCYWaeAuaeQNiXMvN4Zu6d/fktWi/MkWZTNScirgE+AzzSdJamRcS7gY8DjwJk5qnMPNFsqsatAoZm7/JeDRxrOE/PlVLc53oCYd8W1XwRMQpsBHY3m6RR3wPuB043HaQA1wOTwI9np44eiYg1TYdqSmYeBR4EXgWOA29m5q+bTdV7pRS3ziEirgCeBu7NzJNN52lCRNwOvJ6Ze5rOUohVwIeAH2bmRuDfQN+eE4qI99D6dH49sB5YExFfajZV75VS3D6B8CwRMUirtJ/IzJ1N52nQLcBnI+KftKbQPhkRP202UqOOAEcyc+4T2A5aRd6vPgX8IzMnM3Ma2Al8tOFMPVdKcT8PvC8iro+IS2mdXPhFw5kaExFBaw7zQGY+1HSeJmXm1sy8JjNHaf1f/DYzV/w7qvPJzNeAwxExNrvoVnrwbVQVeRW4KSJWz75ubqUPTtZ27YsULsRynkC4wt0CfBnYHxF/mV32wOzDvqRvAE/Mvsl5Bfhqw3kak5m7I2IHsJfW1Vj76IPb373lXZIqU8pUiSSpTRa3JFXG4pakyljcklQZi1uSKmNxS1JlLG5Jqsz/AIFRnGn8u6nHAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from numpy import *\n",
    "from matplotlib.pyplot import *\n",
    "\n",
    "# 产生长度为L信号\n",
    "L = 16\n",
    "n = arange(0,L)\n",
    "x = ones([L,]) #sin(2*pi*0.5*n/L)\n",
    "\n",
    "subplot(311)\n",
    "stem(n,x)\n",
    "show()\n",
    "\n",
    "\n",
    "\n",
    "# 如果L<=N,不会产生混叠\n",
    "N = 19\n",
    "xn = zeros([N,])\n",
    "xn[:L] = x\n",
    "xt = zeros([N,])\n",
    "for i in range(0,N):\n",
    "    xt[i] = xn[i]\n",
    "    if i-N >= 0:\n",
    "        xt[i] = xn[i-N] + xt[i]\n",
    "    if i+N <L:\n",
    "        xt[i]=xt[i] + xn[i+N]\n",
    "subplot(312)\n",
    "stem(xt)\n",
    "show()\n",
    "\n",
    "# 如果L>N,会产生混叠\n",
    "N = 10\n",
    "xn =  x\n",
    "\n",
    "xt = zeros([N,])\n",
    "for i in range(0,N):\n",
    "    xt[i] = xn[i]\n",
    "    if i-N >= 0:\n",
    "        xt[i] = xn[i-N] + xt[i]\n",
    "    if i+N < L:\n",
    "        xt[i]=xt[i] + xn[i+N]\n",
    "subplot(313)\n",
    "stem(xt)\n",
    "show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DFT变换与DTFT变换的关系"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAACFCAYAAACg7bhYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAACtBJREFUeJzt3W+MZfVdx/H3x90FF9Qi7trC7tIhSjAEq9RJaW3SGGsFkbCNmliiptQafFBoNQ0Nq0k1fWBraFRiGytBClUCGKTtaqpb0pr0CW2YhRYKiN1U290FyrQIVUuEpV8f3Lub2dmZvXe29+459zfvV7LZe889872fM38+c+bcM2dSVUiS2vJ9XQeQJE2e5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lq0MaunnjLli01NzfX1dNL0kzau3fvN6tq66j1RpZ7kluAy4Gnq+rCFR4PcCNwGfAd4KqqemDU3Lm5ORYWFkatdpRPPHiQG/Y8zhPPPs/ZZ2zmukvO580XbVvTjGnPXG/zZiGj29y/ebOQsa/bnORrY6036toySd4A/A/wsVXK/TLgWgblfjFwY1VdPOqJ5+fnay3l/okHD7Lrnod5/sWXjizbvGkD7/+Vnzzhd/ikZ663ebOQ0W3u37xZyNjnbU6yt6rmR6038ph7VX0OeOY4q+xkUPxVVZ8Hzkhy1thJx3TDnsePeqcAPP/iS9yw5/HezFxv82Yho9vcv3mzkHEWtnmUSbygug3Yv+T+geGyYyS5OslCkoXFxcU1PckTzz6/puVdzFxv86Yxs+/zpjFzvc2bxsy+z5vWzOM5qWfLVNVNVTVfVfNbt458PeAoZ5+xeU3Lu5i53uZNY2bf501j5nqbN42ZfZ83rZnHM4lyPwjsWHJ/+3DZRF13yfls3rThqGWbN23gukvO783M9TZvFjK6zf2bNwsZZ2GbR5nEqZC7gWuS3MngBdXnqurJCcw9yuEXHN5z90O88NJ32TaBV68nPXO9zZuFjG5z/+bNQsZZ2OZRxjlb5g7g54AtwDeAPwI2AVTVR4anQn4IuJTBqZBvq6qRp8Gs9WyZw379r+8D4K7ffd2a3/ZkzVxv86Yxs+/zpjFzvc2bxsy+z5vEzHHPlhm5515VV454vIB3rCGbJGnKvPyAJDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkho0VrknuTTJ40n2Jbl+hcevSrKY5IvDf78z+aiSpHFtHLVCkg3Ah4E3AQeA+5PsrqpHl616V1VdM4WMkqQ1GmfP/TXAvqr6alW9ANwJ7JxuLEnS92Kcct8G7F9y/8Bw2XK/muShJHcn2bHSoCRXJ1lIsrC4uHgCcSVJ45jUC6r/CMxV1auAe4HbVlqpqm6qqvmqmt+6deuEnlqStNw45X4QWLonvn247Iiq+lZV/d/w7s3Az0wmniTpRIxT7vcD5yU5N8kpwFuA3UtXSHLWkrtXAI9NLqIkaa1Gni1TVYeSXAPsATYAt1TVI0neByxU1W7gnUmuAA4BzwBXTTGzJGmEkeUOUFWfAj61bNl7l9zeBeyabDRJ0onyN1QlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1KCxyj3JpUkeT7IvyfUrPH5qkruGj38hydykg0qSxjey3JNsAD4M/BJwAXBlkguWrfZ24L+q6seBPwf+dNJBJUnjS1Udf4XkdcAfV9Ulw/u7AKrq/UvW2TNc574kG4GngK11nOHz8/O1sLCw5sAfvfJaXrG4nwvO+qE1v+1qHn3y2wATm7ne5k1jZt/nTWPmeps3jZl9n3d45lNbd/C2O/7yhN4+yd6qmh+13sYxZm0D9i+5fwC4eLV1qupQkueAHwG+uSzU1cDVAOecc84YT32sM08/ldOe23BCb7ua005xXt9m9n3eNGaut3nTmNn3eYdnnnn6qROfu9w45T4xVXUTcBMM9txPZMbOmz840UwAr3Re72b2fd40Zq63edOY2fd505q5knFeUD0I7Fhyf/tw2YrrDA/LvAz41iQCSpLWbpxyvx84L8m5SU4B3gLsXrbObuCtw9u/Bnz2eMfbJUnTNfKwzPAY+jXAHmADcEtVPZLkfcBCVe0G/gb42yT7gGcYfAOQJHVk5NkyU3viZBH42gm++RaWvVjbQ33P2Pd8YMZJ6Hs+6H/GvuV7ZVVtHbVSZ+X+vUiyMM6pQF3qe8a+5wMzTkLf80H/M/Y932q8/IAkNchyl6QGzWq539R1gDH0PWPf84EZJ6Hv+aD/Gfueb0UzecxdknR8s7rnLkk6Dstdkho0c+U+6tryXUqyI8m/Jnk0ySNJ3tV1ptUk2ZDkwST/1HWWlSQ5I8ndSf4tyWPDq5P2RpLfH36Mv5zkjiTf34NMtyR5OsmXlyw7M8m9Sb4y/P+He5jxhuHH+aEkH09yRp/yLXns3UkqyZYusq3VTJX7mNeW79Ih4N1VdQHwWuAdPcu31LuAx7oOcRw3Av9SVT8B/BQ9yppkG/BOYL6qLmTwm9t9+K3sW4FLly27HvhMVZ0HfGZ4v0u3cmzGe4ELq+pVwL8Du052qCVu5dh8JNkB/CLw9ZMd6ETNVLkDrwH2VdVXq+oF4E5gZ8eZjqiqJ6vqgeHt/2ZQSNu6TXWsJNuBXwZu7jrLSpK8DHgDg8taUFUvVNWz3aY6xkZg8/BCeacBT3Sch6r6HIPLfyy1E7htePs24M0nNdQyK2Wsqk9X1aHh3c8zuDhhJ1Z5H8LgjxC9B5iZM1BmrdxXurZ878oTYPinBi8CvtBtkhX9BYNP1O92HWQV5wKLwEeHh45uTnJ616EOq6qDwAcZ7MU9CTxXVZ/uNtWqXl5VTw5vPwW8vMswY/ht4J+7DrFUkp3Awar6UtdZ1mLWyn0mJPkB4B+A36uqb3edZ6kklwNPV9XerrMcx0bg1cBfVdVFwP/S/eGEI4bHrXcy+CZ0NnB6kt/sNtVowyu19nbPM8kfMji0eXvXWQ5LchrwB8B7u86yVrNW7uNcW75TSTYxKPbbq+qervOs4PXAFUn+k8FhrZ9P8nfdRjrGAeBAVR3+qeduBmXfF78A/EdVLVbVi8A9wM92nGk130hyFsDw/6c7zrOiJFcBlwO/0bPLhf8Yg2/iXxp+zWwHHkjyik5TjWHWyn2ca8t3JkkYHCd+rKr+rOs8K6mqXVW1varmGLz/PltVvdrrrKqngP1Jzh8ueiPwaIeRlvs68Nokpw0/5m+kRy/4LrP0by28Ffhkh1lWlORSBocJr6iq73SdZ6mqeriqfrSq5oZfMweAVw8/R3ttpsp9+KLL4WvLPwb8fVU90m2qo7we+C0Ge8NfHP67rOtQM+pa4PYkDwE/DfxJx3mOGP5EcTfwAPAwg6+jzn9FPckdwH3A+UkOJHk78AHgTUm+wuAnjg/0MOOHgB8E7h1+zXykZ/lmkpcfkKQGzdSeuyRpPJa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJatD/Aw1ftFxWgCA5AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from numpy import *\n",
    "from matplotlib.pyplot import *\n",
    "from scipy import *\n",
    "\n",
    "# 产生长度为L信号\n",
    "L = 16\n",
    "n = arange(0,L)\n",
    "x = ones([L,]) #sin(2*pi*0.5*n/L)\n",
    "\n",
    "subplot(211)\n",
    "stem(n,x)\n",
    "show()\n",
    "\n",
    "\n",
    "# 如果L<=N,不会产生混叠\n",
    "N = 19\n",
    "xt = real(ifft(fft(x,N),N))\n",
    "subplot(212)\n",
    "stem(xt)\n",
    "show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
